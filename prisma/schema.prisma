// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[] @relation("TrainerSchedules")
  bookings  Booking[]  @relation("TraineeBookings")

  @@map("users")
}

model Schedule {
  id        String   @id @default(uuid())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  trainerId String
  // admin who created the schedule
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainer  User      @relation("TrainerSchedules", fields: [trainerId], references: [id])
  bookings Booking[]

  // prevent overlapping schedules for the same trainer
  @@unique([date, startTime])
  @@index([date, startTime, trainerId])
  @@map("schedules")
}

model Booking {
  id         String   @id @default(uuid())
  traineeId  String
  scheduleId String
  createdAt  DateTime @default(now())

  trainee  User     @relation("TraineeBookings", fields: [traineeId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  // prevent duplicate bookings for the same trainee and schedule
  @@unique([traineeId, scheduleId])
  @@map("bookings")
}

enum Role {
  ADMIN
  TRAINER
  TRAINEE
}
